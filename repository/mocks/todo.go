// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/kritmet/go-task/domain"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: db, i
func (_m *TaskRepository) Create(db *gorm.DB, i interface{}) error {
	ret := _m.Called(db, i)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, interface{}) error); ok {
		r0 = rf(db, i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: db, i
func (_m *TaskRepository) Delete(db *gorm.DB, i interface{}) error {
	ret := _m.Called(db, i)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, interface{}) error); ok {
		r0 = rf(db, i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: db, query
func (_m *TaskRepository) FindAll(db *gorm.DB, query domain.GetAllTaskRequest) ([]domain.Task, error) {
	ret := _m.Called(db, query)

	var r0 []domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, domain.GetAllTaskRequest) ([]domain.Task, error)); ok {
		return rf(db, query)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, domain.GetAllTaskRequest) []domain.Task); ok {
		r0 = rf(db, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, domain.GetAllTaskRequest) error); ok {
		r1 = rf(db, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneByID provides a mock function with given fields: db, id
func (_m *TaskRepository) FindOneByID(db *gorm.DB, id uint) (domain.Task, error) {
	ret := _m.Called(db, id)

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) (domain.Task, error)); ok {
		return rf(db, id)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) domain.Task); ok {
		r0 = rf(db, id)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(db, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: db, i
func (_m *TaskRepository) Update(db *gorm.DB, i interface{}) error {
	ret := _m.Called(db, i)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, interface{}) error); ok {
		r0 = rf(db, i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateFieldByID provides a mock function with given fields: db, id, field, value, i
func (_m *TaskRepository) UpdateFieldByID(db *gorm.DB, id uint, field string, value interface{}, i interface{}) error {
	ret := _m.Called(db, id, field, value, i)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, string, interface{}, interface{}) error); ok {
		r0 = rf(db, id, field, value, i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTaskRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTaskRepository creates a new instance of TaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTaskRepository(t mockConstructorTestingTNewTaskRepository) *TaskRepository {
	mock := &TaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
